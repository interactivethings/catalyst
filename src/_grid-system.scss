/**
 * Catalyst Grid System
 *
 * grid-install         - make the grid classes available to css
 *
 * group                - a group of spans
 * gutter (size)        - wraps around a group, spans will have gutters
 * span   (part, whole) - a column with a percentage based width
 *
 * pull   (part, whole) - reposition a span to the left
 * push   (part, whole) - reposition a span to the right
 * offset (part, whole) - prepend an invisible span
 * offset-none          - reset an existing offset
 * flow   (left|right)  - align a span left or right
 * center               - center a span within a group
 *
 */

@import "globals";


//
// Public API
//

@mixin group {
  @include clearfix;
  clear: both;
  width: 100%;
}

@mixin gutter($size: '') {
  $space: map-get($spaces, $size);
  overflow: hidden;
  & > .group {
    margin-left: -$space;
    width: 100%; // Fallback
    width: calc(100% + 2 * #{$space});
    & > [class*="span-"] {
      padding-left: $space;
      padding-right: $space;
    }
  }
}

@mixin span($part, $whole) {
  @include _span-base;
  @include _span-size($part, $whole);
}

@mixin pull($part, $whole) {
  left: auto;
  right: percentage(($part / $whole));
}

@mixin push($part, $whole) {
  left: percentage(($part / $whole));
  right: auto;
}

@mixin offset($part, $whole) {
  margin-left: percentage(($part / $whole));
}

@mixin offset-none {
  margin-left: 0;
}

@mixin flow($side) {
  float: $side;
  margin-#{$side}: 0;
}

@mixin center {
  float: none;
  margin-left: auto;
  margin-right: auto;
}

@mixin grid-install {
  .group {
    @include group;
  }

  @each $breakpoint in $breakpoints {

    $size: key($breakpoint);
    $declaration: value($breakpoint);

    @media #{$declaration} {

      @each $space in $spaces {
        $space-name: key($space);
        $selector: "gutter-#{$space-name}";
        &.#{_grid-size-name($selector, $size)} {
          @include gutter($space-name);
        }
      }

      $classed-units: ();
      @each $unit in $units {
        $part:  key($unit);
        $whole: value($unit);
        $classed-units: append($classed-units, ".#{_grid-part-name('span', $part, $whole, $size)}");
      }

      #{list-to-string($classed-units, ', ')} {
        @include _span-base;
      }

      @each $unit in $units {
        $part:  key($unit);
        $whole: value($unit);
        .#{_grid-part-name('span', $part, $whole, $size)} {
          @include _span-size($part, $whole);
        }
        .#{_grid-part-name('pull', $part, $whole, $size)} {
          @include pull($part, $whole);
        }
        .#{_grid-part-name('push', $part, $whole, $size)} {
          @include push($part, $whole);
        }
        .#{_grid-part-name('offset', $part, $whole, $size)} {
          @include offset($part, $whole);
        }
        .#{_grid-size-name('center', $size)} {
          @include center;
        }
        .#{_grid-size-name('flow-left', $size)} {
          @include flow(left);
        }
        .#{_grid-size-name('flow-right', $size)} {
          @include flow(right);
        }
      }

      .#{_grid-size-name('offset-none', $size)} {
        @include offset-none;
      }

    }
  }
}


//
// Private API
//

@function _grid-size-name($name, $size: '') {
  @return prefix($name, $size, '-');
}

@function _grid-part-name($name, $part, $whole, $size: '') {
  $part-name: prefix("#{$part}of#{$whole}", $name, '-');
  @return _grid-size-name($part-name, $size);
}

@mixin _span-base {
  display: block;
  float: left;
  min-height: 1px;
  position: relative;
}

@mixin _span-size($part, $whole) {
  width: percentage(($part / $whole));
}
