/**
 * Catalyst Grid System
 *
 * grid-install         - make the grid classes available to css
 *
 * group                - a group of spans
 * gutter (space)       - wraps around a group, spans will have gutters
 * span   (part, whole) - a column with a percentage based width
 *
 * pull   (part, whole) - reposition a span to the left
 * push   (part, whole) - reposition a span to the right
 * offset (part, whole) - prepend an invisible span
 * offset-none          - reset an existing offset
 * flow   (left|right)  - align a span left or right
 * center               - center a span within a group
 *
 */

@import "globals";
@import "utils/layout";
@import "utils/media-query";
@import "utils/spaces";
@import "utils/strings";


//
// Public API
//

@mixin group {
  @include clearfix;
  clear: both;
  width: 100%;
}

@mixin gutter($space) {
  @include _gutter-base;
  @include _gutter($space);
}

@mixin span($part, $whole) {
  @include _span-base;
  @include _span($part, $whole);
}

@mixin pull($part, $whole) {
  left: auto;
  right: percentage($part / $whole);
}

@mixin push($part, $whole) {
  left: percentage($part / $whole);
  right: auto;
}

@mixin offset($part, $whole) {
  margin-left: percentage($part / $whole);
}

@mixin offset-none {
  margin-left: 0;
}

@mixin flow($side) {
  float: $side;
  margin-#{$side}: 0;
}

@mixin center {
  float: none;
  margin-left: auto;
  margin-right: auto;
}

@mixin grid-install {
  //
  // Shared styles
  //
  .group {
    @include group;
  }

  #{_space-selectors('gutter')} {
    @include _gutter-base;
  }

  #{_proportion-selectors('span')} {
    @include _span-base;
  }


  //
  // Breakpoint specific styles
  //
  @each $breakpoint in list-keys($breakpoints) {

    @include breakpoint($breakpoint) {

      @each $space in list-keys($spaces) {
        .#{_space-selector('gutter', $space, $breakpoint)} {
          @include _gutter($space);
        }
      }

      @each $proportion in $proportions {
        $part:  key($proportion);
        $whole: value($proportion);
        .#{_proportion-selector('span', $part, $whole, $breakpoint)} {
          @include _span($part, $whole);
        }
        .#{_proportion-selector('pull', $part, $whole, $breakpoint)} {
          @include pull($part, $whole);
        }
        .#{_proportion-selector('push', $part, $whole, $breakpoint)} {
          @include push($part, $whole);
        }
        .#{_proportion-selector('offset', $part, $whole, $breakpoint)} {
          @include offset($part, $whole);
        }
        .#{_breakpoint-selector('center', $breakpoint)} {
          @include center;
        }
        .#{_breakpoint-selector('flow-left', $breakpoint)} {
          @include flow(left);
        }
        .#{_breakpoint-selector('flow-right', $breakpoint)} {
          @include flow(right);
        }
      }

      .#{_breakpoint-selector('offset-none', $breakpoint)} {
        @include offset-none;
      }

    }
  }
}


//
// Private API
//

@function _breakpoint-selector($name, $breakpoint: '') {
  @return prefix($name, $breakpoint, '-');
}

@function _proportion-selector($name, $part, $whole, $breakpoint: '') {
  $proportion: prefix("#{$part}of#{$whole}", $name, '-');
  @return prefix($proportion, $breakpoint, '-');
}

@function _proportion-selectors($name) {
  $selectors: ();
  @each $breakpoint in list-keys($breakpoints) {
    @each $proportion in $proportions {
      $part:  key($proportion);
      $whole: value($proportion);
      $selector: prefix(_proportion-selector($name, $part, $whole, $breakpoint), '.');
      $selectors: append($selectors, $selector);
    }
  }
  @return list-flatten($selectors, ', ');
}

@function _space-selector($name, $space: '', $breakpoint: '') {
  @return prefix(suffix($name, $space, '-'), $breakpoint, '-');
}

@function _space-selectors($name) {
  $selectors: ();
  @each $breakpoint in list-keys($breakpoints) {
    @each $space in list-keys($spaces) {
      $selector: prefix(_space-selector($name, $space, $breakpoint), '.');
      $selectors: append($selectors, $selector);
    }
  }
  @return list-flatten($selectors, ', ');
}

@mixin _gutter-base {
  overflow: hidden;
}

@mixin _gutter($space) {
  $gutter: space($space);
  & > .group {
    margin-left: -$gutter;
    width: 100%; // Fallback
    width: calc(100% + #{2 * $gutter});
    & > [class*="span-"] {
      padding-left: $gutter;
      padding-right: $gutter;
    }
  }
}

@mixin _span-base {
  display: block;
  float: left;
  min-height: 1px;
  position: relative;
}

@mixin _span($part, $whole) {
  width: percentage($part / $whole);
}
